#include "windows.h"
#include <iostream>
#include <string>
using namespace std;
void xorResource(LPVOID lpResourceBuffer, DWORD dwResourceSize);
int main(int argc, char* argv[]) {
	string pe;
	printf("Enter PE file name to pack: ");
	getline(cin, pe);
	const char* resourceFile = pe.c_str();
	string stub;
	printf("Enter packing stub: ");
	getline(cin, stub);
	const char* fileName = stub.c_str();
	string tempFile = stub.substr(0, stub.length() - 4);

	string ext("_packed.exe");
	tempFile = tempFile + ext;

	HANDLE hResourceFile = CreateFileA(
		resourceFile,
		GENERIC_READ,
		0,
		NULL,
		OPEN_EXISTING,
		FILE_ATTRIBUTE_NORMAL,
		NULL
	);

	if (hResourceFile == INVALID_HANDLE_VALUE) {
		printf("CreateFileA fails.\n");
		return -1;
	}

	DWORD dwResourceSize = GetFileSize(hResourceFile, NULL);
	if (dwResourceSize <= 0) {
		CloseHandle(hResourceFile);
		printf("GetFileSize fails.\n");
		return -1;
	}

	LPVOID lpResourceBuffer = VirtualAlloc(
		NULL,
		dwResourceSize,
		MEM_COMMIT | MEM_RESERVE,
		PAGE_READWRITE
	);

	if (!lpResourceBuffer) {
		CloseHandle(hResourceFile);
		printf("VirtualAlloc fails.\n");
		return -1;
	}

	if (!ReadFile(
		hResourceFile,
		lpResourceBuffer,
		dwResourceSize,
		NULL,
		NULL
	)) {
		VirtualFree(lpResourceBuffer, dwResourceSize, MEM_FREE);
		CloseHandle(hResourceFile);
		printf("ReadFile fails.\n");
		return -1;
	}
	CloseHandle(hResourceFile);
	xorResource(lpResourceBuffer, dwResourceSize);

	if (!CopyFileA(
		fileName,
		tempFile.c_str(),
		TRUE
	)) {
		VirtualFree(lpResourceBuffer, dwResourceSize, MEM_FREE);
		printf("BeginUpdateResourceA fails.\n");
		return -1;
	}
	fileName = tempFile.c_str();
	HANDLE hUpdate = BeginUpdateResourceA(
		fileName,
		FALSE
	);

	if (!hUpdate || hUpdate == INVALID_HANDLE_VALUE) {
		VirtualFree(lpResourceBuffer, dwResourceSize, MEM_FREE);
		printf("BeginUpdateResourceA fails.\n");
		return -1;
	}

	if (!UpdateResourceW(
		hUpdate,
		L"EXE",
		MAKEINTRESOURCE(69),
		MAKELANGID(LANG_NEUTRAL, SUBLANG_NEUTRAL),
		lpResourceBuffer,
		dwResourceSize
	)) {
		VirtualFree(lpResourceBuffer, dwResourceSize, MEM_FREE);
		printf("UpdateResourceW fails\n");
		return -1;
	}

	if (!EndUpdateResourceA(
		hUpdate,
		FALSE
	)) {
		VirtualFree(lpResourceBuffer, dwResourceSize, MEM_FREE);
		printf("EndUpdateResourceA fails\n");
		return -1;
	}
	printf("Suceed!!!\n");
	VirtualFree(lpResourceBuffer, dwResourceSize, MEM_FREE);
	return 0;
}

void xorResource(LPVOID lpResourceBuffer, DWORD dwResourceSize) {
	BYTE* temp = (BYTE*)lpResourceBuffer;

	DWORD i;
	for (i = 0; i < dwResourceSize; i++) {
		BYTE each = *temp;
		if (each != 0 && each != 0x72) {
			*temp = each ^ 0x72;
		}

		temp++;
	}
}